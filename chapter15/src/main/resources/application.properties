spring.application.name=chapter15
server.port=8080
spring.mvc.view.prefix=/WEB-INF/jsp/
spring.mvc.view.suffix=.jsp

#DEVTOOLS (DevToolsProperties)
#是否启用一个livereload.com 兼容的服务器
spring.devtools.livereload.enabled=true
#端口livereload.com服务器端口
spring.devtools.livereload.port=35729
#在原来的基础上新增不重启服务的文件夹目录
#spring.devtools.restart.additional-exclude=
#在原来的基础上新增重启服务的文件夹目录
#spring.devtools.restart.additional-paths=
#是否启用自动重启功能
spring.devtools.restart.enabled=true
#不重启服务的文件夹配置
spring.devtools.restart.exclude=META INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties
#设置对路径变化进行监测的时间间隔（以毫秒为单位）
spring.devtools.restart.poll-interval=1000
#在没有改变任何classpath的情况下，在重启被触发前的静默时长（以毫秒计）
spring.devtools.restart.quiet-period=400
#设置触发文件，当需要实际触发重启检查时，则需要修改这个文件
#spring.devtools.restart.trigger-file=

#auditevents 公开当前应用程序的审查事件信息
#beans 显示Spring IoC容器关于Bean的信息
#conditions 显示自动配置类的评估和配置条件，并且显示他们匹配或者不匹配的是原因
#configprops 显示当前项目的属性配置信息（通过＠ConfigurationProperties配置）
#env 显示当前Spring应用环境配置属性（ConfigurableEnvironment)
#flyway 显示已经应用于flyway数据库迁移的信息
#health 显示当前应用健康状态
#httptrace 显示最新追踪信息（默认为最新100次HTTP请求）
#info 显示当前应用信息
#loggers 显示并修改应用程序中记录器的配置
#liquibase 显示己经应用于liquibase数据库迁移的信息
#metrics 显示当前配置的各项“度量”指标
#mappings 显示由＠RequestMapping(@GetMapping和＠PostMapping等)配置的映射路径信息
#scheduledtasks 显示当前应用的任务计划
#sessions 允许从Spring会话支持的会话存储库检索和删除用户会话，只是Spring 会话对响应式Web应用还暂时不能支持
#shutdown 允许当前应用被优雅地进行关闭（在默认的情况下不启用这个端点）
#threaddump 显示线程泵
#HTTP监控，启动服务访问http://localhost:8080/actuator/beans或者http://localhost:8080/actuator/health

# Actuator 管理端口
#management.server.port=8000
#暴露所有端点
management.endpoints.web.exposure.include=*
#默认情况下所有端点都不启用，此时需要按需启用端点
management.endpoints.enabled-by-default=false
#启用端点info
management.endpoint.info.enabled=true
#启用端点beans
management.endpoint.beans.enabled=true
#启用端点conf igprops
management.endpoint.configprops.enabled=true
#启用端点env
management.endpoint.env.enabled=true
#启用端点health
management.endpoint.health.enabled=true
#CassandraHealthlndicator 监测Cassandra数据库是否可用
#DiskSpaceHealthlndicator 监测服务器磁盘使用情况
#DataSourceHealthlndicator 监测数据库是否可用
#InfluxDbHealthlndicator 监测IntfluxDB服务器是否可用
#ElasticsearchHealthJndicator 监测Elasticsearch集群是否可用
#JmsHealthlndicator 监测JSM渠道是否可用
#MailHealthlndicator 监测邮件服务器渠道是否可用
#MongoHealthlndicator 监测MongoDB服务器是否可用
#Neo4jHealthlndicator 监测Neo4j服务器是否可用
#RabbitHealthlndicator 监测RabbitMQ服务器是否可用
#RedisHealthlndicator 监测Redis服务器是否可用
#SolrHealthlndica tor 监测Solr服务器是否可用
# never 一一从不展示健康项
# when - authorized 一一签名认证之后展示
# always 一一每次都展示
management.endpoint.health.show-details=always
#先禁止全部健康指标的监测
#management.health.defaults.enabled=false
#需要关闭数据库的健康指标
#management.health.db.enabled=false
#启用端点mappings
management.endpoint.mappings.enabled=true
#启用shutdown端点，在默认的情况下，Actuator并不会给开发者启动这个端点，因为请求它是危险的，从名称就可以知道，请求它将关闭服务
management.endpoint.shutdown.enabled=true
#启动自定义的dbcheck端点
management.endpoint.dbcheck.enabled=true
# Actuator端点前缀
management.endpoints.web.base-path=/manage
#将原来的mappings端点的请求路径修改为urlMappings
management.endpoints.web.path-mapping.mappings=request_mappings
#不暴露env端点
#management.endpoints.web.exposure.exclude=env

#数据库配置
spring.datasource.url=jdbc:mysql://192.168.56.102:3306/test
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.tomcat.max-idle=10
spring.datasource.tomcat.max-active=50
spring.datasource.tomcat.max-wait=10000
spring.datasource.tomcat.initial-size=5

mybatis.mapper-locations=mapper/*.xml
mybatis.type-aliases-package=com.springboot.chapter15.pojo
#配置typeHandler扫描包，具体类需要与@MappedJdbcTypes联合使用
mybatis.type-handlers-package=com.springboot.chapter15.typehandler