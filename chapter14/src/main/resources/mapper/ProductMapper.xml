<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springboot.chapter14.dao.ProductDao">
  <resultMap id="BaseResultMap" type="com.springboot.chapter14.pojo.Product">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="product_name" jdbcType="VARCHAR" property="productName" />
    <result column="stock" jdbcType="INTEGER" property="stock" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="version" jdbcType="INTEGER" property="version" />
    <result column="note" jdbcType="VARCHAR" property="note" />
  </resultMap>
  <sql id="Base_Column_List">
    id, product_name, stock, price, version, note
  </sql>
  <!-- 悲观锁:如果一个数据库事务读取到产品后，就将数据直接锁定，不允许别的线程进行读写操作，直至当前数据库事务完成才释放这条数据的锁 -->
  <!-- 在SQL的最后加入了for update语句，这样在数据库事务执行的过程中，就会锁定查询出来的数据，其他的事务将不能再对其进行读写，这样就避免了数据的不一致 -->
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_product
    where id = #{id,jdbcType=INTEGER}
    # for update
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_product
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyProperty="id" useGeneratedKeys="true" parameterType="com.springboot.chapter14.pojo.Product">
    insert into t_product (id, product_name, stock, 
      price, version, note
      )
    values (#{id,jdbcType=INTEGER}, #{productName,jdbcType=VARCHAR}, #{stock,jdbcType=INTEGER}, 
      #{price,jdbcType=DECIMAL}, #{version,jdbcType=INTEGER}, #{note,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.springboot.chapter14.pojo.Product">
    insert into t_product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="productName != null">
        product_name,
      </if>
      <if test="stock != null">
        stock,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="version != null">
        version,
      </if>
      <if test="note != null">
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="productName != null">
        #{productName,jdbcType=VARCHAR},
      </if>
      <if test="stock != null">
        #{stock,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.springboot.chapter14.pojo.Product">
    update t_product
    <set>
      <if test="productName != null">
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="stock != null">
        stock = #{stock,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="version != null">
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.springboot.chapter14.pojo.Product">
    update t_product
    set product_name = #{productName,jdbcType=VARCHAR},
      stock = #{stock,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL},
      version = #{version,jdbcType=INTEGER},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- 减库存 -->
  <update id="decreaseProduct">
    update t_product
    set stock = stock - #{quantity,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="decreaseProductWithVersion">
    update t_product
    set stock = stock - #{quantity,jdbcType=INTEGER},
        version = version + 1
    where id = #{id,jdbcType=INTEGER}
      and version = #{version,jdbcType=INTEGER}
  </update>
</mapper>